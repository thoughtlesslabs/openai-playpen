import type { TextBuffer } from "./text-buffer";
import { RGBA } from "./lib";
import { type RenderLib } from "./zig";
import { type Pointer } from "bun:ffi";
import { type BorderStyle, type BorderSides } from "./lib";
import { type WidthMethod } from "./types";
export declare class OptimizedBuffer {
    private static fbIdCounter;
    id: string;
    lib: RenderLib;
    private bufferPtr;
    private _width;
    private _height;
    respectAlpha: boolean;
    private _rawBuffers;
    private _destroyed;
    get ptr(): Pointer;
    private guard;
    get buffers(): {
        char: Uint32Array;
        fg: Float32Array;
        bg: Float32Array;
        attributes: Uint8Array;
    };
    constructor(lib: RenderLib, ptr: Pointer, width: number, height: number, options: {
        respectAlpha?: boolean;
        id?: string;
    });
    static create(width: number, height: number, widthMethod: WidthMethod, options?: {
        respectAlpha?: boolean;
        id?: string;
    }): OptimizedBuffer;
    get width(): number;
    get height(): number;
    setRespectAlpha(respectAlpha: boolean): void;
    getNativeId(): string;
    getRealCharBytes(addLineBreaks?: boolean): Uint8Array;
    clear(bg?: RGBA): void;
    setCell(x: number, y: number, char: string, fg: RGBA, bg: RGBA, attributes?: number): void;
    setCellWithAlphaBlending(x: number, y: number, char: string, fg: RGBA, bg: RGBA, attributes?: number): void;
    drawText(text: string, x: number, y: number, fg: RGBA, bg?: RGBA, attributes?: number, selection?: {
        start: number;
        end: number;
        bgColor?: RGBA;
        fgColor?: RGBA;
    } | null): void;
    fillRect(x: number, y: number, width: number, height: number, bg: RGBA): void;
    drawFrameBuffer(destX: number, destY: number, frameBuffer: OptimizedBuffer, sourceX?: number, sourceY?: number, sourceWidth?: number, sourceHeight?: number): void;
    destroy(): void;
    drawTextBuffer(textBuffer: TextBuffer, x: number, y: number, clipRect?: {
        x: number;
        y: number;
        width: number;
        height: number;
    }): void;
    drawSuperSampleBuffer(x: number, y: number, pixelDataPtr: Pointer, pixelDataLength: number, format: "bgra8unorm" | "rgba8unorm", alignedBytesPerRow: number): void;
    drawPackedBuffer(dataPtr: Pointer, dataLen: number, posX: number, posY: number, terminalWidthCells: number, terminalHeightCells: number): void;
    resize(width: number, height: number): void;
    drawBox(options: {
        x: number;
        y: number;
        width: number;
        height: number;
        borderStyle?: BorderStyle;
        customBorderChars?: Uint32Array;
        border: boolean | BorderSides[];
        borderColor: RGBA;
        backgroundColor: RGBA;
        shouldFill?: boolean;
        title?: string;
        titleAlignment?: "left" | "center" | "right";
    }): void;
    pushScissorRect(x: number, y: number, width: number, height: number): void;
    popScissorRect(): void;
    clearScissorRects(): void;
}
