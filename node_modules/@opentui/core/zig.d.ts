import { type Pointer } from "bun:ffi";
import { type CursorStyle, type DebugOverlayCorner, type WidthMethod } from "./types";
import { RGBA } from "./lib/RGBA";
import { OptimizedBuffer } from "./buffer";
import { TextBuffer } from "./text-buffer";
export declare enum LogLevel {
    Error = 0,
    Warn = 1,
    Info = 2,
    Debug = 3
}
export interface LineInfo {
    lineStarts: number[];
    lineWidths: number[];
    maxLineWidth: number;
}
export interface RenderLib {
    createRenderer: (width: number, height: number, options?: {
        testing: boolean;
    }) => Pointer | null;
    destroyRenderer: (renderer: Pointer) => void;
    setUseThread: (renderer: Pointer, useThread: boolean) => void;
    setBackgroundColor: (renderer: Pointer, color: RGBA) => void;
    setRenderOffset: (renderer: Pointer, offset: number) => void;
    updateStats: (renderer: Pointer, time: number, fps: number, frameCallbackTime: number) => void;
    updateMemoryStats: (renderer: Pointer, heapUsed: number, heapTotal: number, arrayBuffers: number) => void;
    render: (renderer: Pointer, force: boolean) => void;
    getNextBuffer: (renderer: Pointer) => OptimizedBuffer;
    getCurrentBuffer: (renderer: Pointer) => OptimizedBuffer;
    createOptimizedBuffer: (width: number, height: number, widthMethod: WidthMethod, respectAlpha?: boolean, id?: string) => OptimizedBuffer;
    destroyOptimizedBuffer: (bufferPtr: Pointer) => void;
    drawFrameBuffer: (targetBufferPtr: Pointer, destX: number, destY: number, bufferPtr: Pointer, sourceX?: number, sourceY?: number, sourceWidth?: number, sourceHeight?: number) => void;
    getBufferWidth: (buffer: Pointer) => number;
    getBufferHeight: (buffer: Pointer) => number;
    bufferClear: (buffer: Pointer, color: RGBA) => void;
    bufferGetCharPtr: (buffer: Pointer) => Pointer;
    bufferGetFgPtr: (buffer: Pointer) => Pointer;
    bufferGetBgPtr: (buffer: Pointer) => Pointer;
    bufferGetAttributesPtr: (buffer: Pointer) => Pointer;
    bufferGetRespectAlpha: (buffer: Pointer) => boolean;
    bufferSetRespectAlpha: (buffer: Pointer, respectAlpha: boolean) => void;
    bufferGetId: (buffer: Pointer) => string;
    bufferGetRealCharSize: (buffer: Pointer) => number;
    bufferWriteResolvedChars: (buffer: Pointer, outputBuffer: Uint8Array, addLineBreaks: boolean) => number;
    bufferDrawText: (buffer: Pointer, text: string, x: number, y: number, color: RGBA, bgColor?: RGBA, attributes?: number) => void;
    bufferSetCellWithAlphaBlending: (buffer: Pointer, x: number, y: number, char: string, color: RGBA, bgColor: RGBA, attributes?: number) => void;
    bufferSetCell: (buffer: Pointer, x: number, y: number, char: string, color: RGBA, bgColor: RGBA, attributes?: number) => void;
    bufferFillRect: (buffer: Pointer, x: number, y: number, width: number, height: number, color: RGBA) => void;
    bufferDrawSuperSampleBuffer: (buffer: Pointer, x: number, y: number, pixelDataPtr: Pointer, pixelDataLength: number, format: "bgra8unorm" | "rgba8unorm", alignedBytesPerRow: number) => void;
    bufferDrawPackedBuffer: (buffer: Pointer, dataPtr: Pointer, dataLen: number, posX: number, posY: number, terminalWidthCells: number, terminalHeightCells: number) => void;
    bufferDrawBox: (buffer: Pointer, x: number, y: number, width: number, height: number, borderChars: Uint32Array, packedOptions: number, borderColor: RGBA, backgroundColor: RGBA, title: string | null) => void;
    bufferResize: (buffer: Pointer, width: number, height: number) => void;
    resizeRenderer: (renderer: Pointer, width: number, height: number) => void;
    setCursorPosition: (renderer: Pointer, x: number, y: number, visible: boolean) => void;
    setCursorStyle: (renderer: Pointer, style: CursorStyle, blinking: boolean) => void;
    setCursorColor: (renderer: Pointer, color: RGBA) => void;
    setDebugOverlay: (renderer: Pointer, enabled: boolean, corner: DebugOverlayCorner) => void;
    clearTerminal: (renderer: Pointer) => void;
    setTerminalTitle: (renderer: Pointer, title: string) => void;
    addToHitGrid: (renderer: Pointer, x: number, y: number, width: number, height: number, id: number) => void;
    checkHit: (renderer: Pointer, x: number, y: number) => number;
    dumpHitGrid: (renderer: Pointer) => void;
    dumpBuffers: (renderer: Pointer, timestamp?: number) => void;
    dumpStdoutBuffer: (renderer: Pointer, timestamp?: number) => void;
    enableMouse: (renderer: Pointer, enableMovement: boolean) => void;
    disableMouse: (renderer: Pointer) => void;
    enableKittyKeyboard: (renderer: Pointer, flags: number) => void;
    disableKittyKeyboard: (renderer: Pointer) => void;
    setupTerminal: (renderer: Pointer, useAlternateScreen: boolean) => void;
    queryPixelResolution: (renderer: Pointer) => void;
    createTextBuffer: (widthMethod: WidthMethod) => TextBuffer;
    destroyTextBuffer: (buffer: Pointer) => void;
    textBufferGetLength: (buffer: Pointer) => number;
    textBufferReset: (buffer: Pointer) => void;
    textBufferSetSelection: (buffer: Pointer, start: number, end: number, bgColor: RGBA | null, fgColor: RGBA | null) => void;
    textBufferResetSelection: (buffer: Pointer) => void;
    textBufferSetLocalSelection: (buffer: Pointer, anchorX: number, anchorY: number, focusX: number, focusY: number, bgColor: RGBA | null, fgColor: RGBA | null) => boolean;
    textBufferResetLocalSelection: (buffer: Pointer) => void;
    textBufferSetDefaultFg: (buffer: Pointer, fg: RGBA | null) => void;
    textBufferSetDefaultBg: (buffer: Pointer, bg: RGBA | null) => void;
    textBufferSetDefaultAttributes: (buffer: Pointer, attributes: number | null) => void;
    textBufferResetDefaults: (buffer: Pointer) => void;
    textBufferWriteChunk: (buffer: Pointer, textBytes: Uint8Array, fg: RGBA | null, bg: RGBA | null, attributes: number | null) => number;
    textBufferFinalizeLineInfo: (buffer: Pointer) => void;
    textBufferGetLineCount: (buffer: Pointer) => number;
    textBufferGetLineInfoDirect: (buffer: Pointer, lineStartsPtr: Pointer, lineWidthsPtr: Pointer) => void;
    textBufferGetLineInfo: (buffer: Pointer) => LineInfo;
    textBufferGetSelection: (buffer: Pointer) => {
        start: number;
        end: number;
    } | null;
    getSelectedTextBytes: (buffer: Pointer, maxLength: number) => Uint8Array | null;
    getPlainTextBytes: (buffer: Pointer, maxLength: number) => Uint8Array | null;
    readonly encoder: TextEncoder;
    readonly decoder: TextDecoder;
    bufferDrawTextBuffer: (buffer: Pointer, textBuffer: Pointer, x: number, y: number, clipRect?: {
        x: number;
        y: number;
        width: number;
        height: number;
    }) => void;
    bufferPushScissorRect: (buffer: Pointer, x: number, y: number, width: number, height: number) => void;
    bufferPopScissorRect: (buffer: Pointer) => void;
    bufferClearScissorRects: (buffer: Pointer) => void;
    textBufferInsertChunkGroup: (buffer: Pointer, index: number, textBytes: Uint8Array, fg: RGBA | null, bg: RGBA | null, attributes: number | null) => number;
    textBufferRemoveChunkGroup: (buffer: Pointer, index: number) => number;
    textBufferReplaceChunkGroup: (buffer: Pointer, index: number, textBytes: Uint8Array, fg: RGBA | null, bg: RGBA | null, attributes: number | null) => number;
    textBufferGetChunkGroupCount: (buffer: Pointer) => number;
    textBufferSetWrapWidth: (buffer: Pointer, width: number) => void;
    textBufferSetWrapMode: (buffer: Pointer, mode: "char" | "word") => void;
    getArenaAllocatedBytes: () => number;
    getTerminalCapabilities: (renderer: Pointer) => any;
    processCapabilityResponse: (renderer: Pointer, response: string) => void;
}
export declare function setRenderLibPath(libPath: string): void;
export declare function resolveRenderLib(): RenderLib;
