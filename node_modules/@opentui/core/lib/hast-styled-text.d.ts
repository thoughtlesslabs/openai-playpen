import { RGBA } from "./RGBA";
import { StyledText } from "./styled-text";
export interface HASTText {
    type: "text";
    value: string;
}
export interface HASTElement {
    type: "element";
    tagName: string;
    properties?: {
        className?: string;
    };
    children: HASTNode[];
}
export type HASTNode = HASTText | HASTElement;
export interface StyleDefinition {
    fg?: RGBA;
    bg?: RGBA;
    bold?: boolean;
    italic?: boolean;
    underline?: boolean;
    dim?: boolean;
}
interface MergedStyle {
    fg?: RGBA;
    bg?: RGBA;
    attributes: number;
}
export declare class SyntaxStyle {
    private styles;
    private mergedStyleCache;
    constructor(styles: Record<string, StyleDefinition>);
    mergeStyles(...styleNames: string[]): MergedStyle;
    clearCache(): void;
    getCacheSize(): number;
}
export declare function hastToStyledText(hast: HASTNode, syntaxStyle: SyntaxStyle): StyledText;
export {};
