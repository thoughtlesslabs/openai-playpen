import type { CliRenderer } from "../renderer";
export declare const KeyCodes: {
    readonly ENTER: "\r";
    readonly TAB: "\t";
    readonly BACKSPACE: "\b";
    readonly DELETE: "\u001B[3~";
    readonly HOME: "\u001B[H";
    readonly END: "\u001B[F";
    readonly ESCAPE: "\u001B";
    readonly ARROW_UP: "\u001B[A";
    readonly ARROW_DOWN: "\u001B[B";
    readonly ARROW_RIGHT: "\u001B[C";
    readonly ARROW_LEFT: "\u001B[D";
    readonly F1: "\u001BOP";
    readonly F2: "\u001BOQ";
    readonly F3: "\u001BOR";
    readonly F4: "\u001BOS";
    readonly F5: "\u001B[15~";
    readonly F6: "\u001B[17~";
    readonly F7: "\u001B[18~";
    readonly F8: "\u001B[19~";
    readonly F9: "\u001B[20~";
    readonly F10: "\u001B[21~";
    readonly F11: "\u001B[23~";
    readonly F12: "\u001B[24~";
    readonly CTRL_A: "\u0001";
    readonly CTRL_B: "\u0002";
    readonly CTRL_C: "\u0003";
    readonly CTRL_D: "\u0004";
    readonly CTRL_E: "\u0005";
    readonly CTRL_F: "\u0006";
    readonly CTRL_G: "\u0007";
    readonly CTRL_H: "\b";
    readonly CTRL_I: "\t";
    readonly CTRL_J: "\n";
    readonly CTRL_K: "\v";
    readonly CTRL_L: "\f";
    readonly CTRL_M: "\r";
    readonly CTRL_N: "\u000E";
    readonly CTRL_O: "\u000F";
    readonly CTRL_P: "\u0010";
    readonly CTRL_Q: "\u0011";
    readonly CTRL_R: "\u0012";
    readonly CTRL_S: "\u0013";
    readonly CTRL_T: "\u0014";
    readonly CTRL_U: "\u0015";
    readonly CTRL_V: "\u0016";
    readonly CTRL_W: "\u0017";
    readonly CTRL_X: "\u0018";
    readonly CTRL_Y: "\u0019";
    readonly CTRL_Z: "\u001A";
    readonly ALT_A: "\u001Ba";
    readonly ALT_B: "\u001Bb";
    readonly ALT_C: "\u001Bc";
};
export type KeyInput = string | keyof typeof KeyCodes;
export declare function createMockKeys(renderer: CliRenderer): {
    pressKeys: (keys: KeyInput[], delayMs?: number) => Promise<void>;
    pressKey: (key: KeyInput) => void;
    typeText: (text: string, delayMs?: number) => Promise<void>;
    pressEnter: () => void;
    pressEscape: () => void;
    pressTab: () => void;
    pressBackspace: () => void;
    pressArrow: (direction: "up" | "down" | "left" | "right") => void;
    pressCtrlC: () => void;
    pasteBracketedText: (text: string) => Promise<void>;
};
