import type { RGBA } from "./lib/RGBA";
import type { EventEmitter } from "events";
import type { Selection } from "./lib/selection";
import type { Renderable } from "./Renderable";
import type { KeyHandler } from "./lib";
export declare const TextAttributes: {
    NONE: number;
    BOLD: number;
    DIM: number;
    ITALIC: number;
    UNDERLINE: number;
    BLINK: number;
    INVERSE: number;
    HIDDEN: number;
    STRIKETHROUGH: number;
};
export type CursorStyle = "block" | "line" | "underline";
export declare enum DebugOverlayCorner {
    topLeft = 0,
    topRight = 1,
    bottomLeft = 2,
    bottomRight = 3
}
export type WidthMethod = "wcwidth" | "unicode";
export interface RendererEvents {
    resize: (width: number, height: number) => void;
    key: (data: Buffer) => void;
    "memory:snapshot": (snapshot: {
        heapUsed: number;
        heapTotal: number;
        arrayBuffers: number;
    }) => void;
    selection: (selection: Selection) => void;
    "debugOverlay:toggle": (enabled: boolean) => void;
}
export interface RenderContext extends EventEmitter {
    addToHitGrid: (x: number, y: number, width: number, height: number, id: number) => void;
    width: number;
    height: number;
    requestRender: () => void;
    setCursorPosition: (x: number, y: number, visible: boolean) => void;
    setCursorStyle: (style: CursorStyle, blinking: boolean) => void;
    setCursorColor: (color: RGBA) => void;
    widthMethod: WidthMethod;
    capabilities: any | null;
    requestLive: () => void;
    dropLive: () => void;
    hasSelection: boolean;
    getSelection: () => Selection | null;
    requestSelectionUpdate: () => void;
    currentFocusedRenderable: Renderable | null;
    focusRenderable: (renderable: Renderable) => void;
    registerLifecyclePass: (renderable: Renderable) => void;
    unregisterLifecyclePass: (renderable: Renderable) => void;
    getLifecyclePasses: () => Set<Renderable>;
    keyInput: KeyHandler;
}
export type Timeout = ReturnType<typeof setTimeout> | undefined;
export interface ViewportBounds {
    x: number;
    y: number;
    width: number;
    height: number;
}
