import type { RenderableOptions } from "../Renderable";
import { Selection } from "../lib/selection";
import { type fonts, type ASCIIFontName } from "../lib/ascii.font";
import { RGBA } from "../lib/RGBA";
import { FrameBufferRenderable } from "./FrameBuffer";
import type { RenderContext } from "../types";
export interface ASCIIFontOptions extends Omit<RenderableOptions<ASCIIFontRenderable>, "width" | "height"> {
    text?: string;
    font?: ASCIIFontName;
    fg?: RGBA | RGBA[];
    bg?: RGBA;
    selectionBg?: string | RGBA;
    selectionFg?: string | RGBA;
    selectable?: boolean;
}
export declare class ASCIIFontRenderable extends FrameBufferRenderable {
    selectable: boolean;
    private _text;
    private _font;
    private _fg;
    private _bg;
    private _selectionBg;
    private _selectionFg;
    private lastLocalSelection;
    private selectionHelper;
    constructor(ctx: RenderContext, options: ASCIIFontOptions);
    get text(): string;
    set text(value: string);
    get font(): keyof typeof fonts;
    set font(value: keyof typeof fonts);
    get fg(): RGBA[];
    set fg(value: RGBA | RGBA[] | string | string[]);
    get bg(): RGBA;
    set bg(value: RGBA | string);
    private updateDimensions;
    shouldStartSelection(x: number, y: number): boolean;
    onSelectionChanged(selection: Selection | null): boolean;
    getSelectedText(): string;
    hasSelection(): boolean;
    protected onResize(width: number, height: number): void;
    private renderFontToBuffer;
    private renderSelectionHighlight;
}
