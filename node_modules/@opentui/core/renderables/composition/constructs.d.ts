import { ASCIIFontRenderable, BoxRenderable, InputRenderable, SelectRenderable, TabSelectRenderable, TextRenderable, VRenderable, type ASCIIFontOptions, type BoxOptions, type TextOptions, type VRenderableOptions, type InputRenderableOptions, type SelectRenderableOptions, type TabSelectRenderableOptions, FrameBufferRenderable, type FrameBufferOptions } from "../";
import { TextNodeRenderable } from "../TextNode";
import { type VChild } from "./vnode";
import type { RGBA } from "../../lib/RGBA";
export declare function Generic(props?: VRenderableOptions, ...children: VChild[]): import("./vnode").ProxiedVNode<typeof VRenderable>;
export declare function Box(props?: BoxOptions, ...children: VChild[]): import("./vnode").ProxiedVNode<typeof BoxRenderable>;
export declare function Text(props?: TextOptions & {
    content?: any;
}, ...children: VChild[] | TextNodeRenderable[]): import("./vnode").ProxiedVNode<typeof TextRenderable>;
export declare function ASCIIFont(props?: ASCIIFontOptions, ...children: VChild[]): import("./vnode").ProxiedVNode<typeof ASCIIFontRenderable>;
export declare function Input(props?: InputRenderableOptions, ...children: VChild[]): import("./vnode").ProxiedVNode<typeof InputRenderable>;
export declare function Select(props?: SelectRenderableOptions, ...children: VChild[]): import("./vnode").ProxiedVNode<typeof SelectRenderable>;
export declare function TabSelect(props?: TabSelectRenderableOptions, ...children: VChild[]): import("./vnode").ProxiedVNode<typeof TabSelectRenderable>;
export declare function FrameBuffer(props: FrameBufferOptions, ...children: VChild[]): import("./vnode").ProxiedVNode<typeof FrameBufferRenderable>;
export declare const vstyles: {
    bold: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    italic: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    underline: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    dim: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    blink: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    inverse: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    hidden: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    strikethrough: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    boldItalic: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    boldUnderline: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    italicUnderline: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    boldItalicUnderline: (...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    color: (color: string | RGBA, ...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    bgColor: (bgColor: string | RGBA, ...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    fg: (color: string | RGBA, ...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    bg: (bgColor: string | RGBA, ...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
    styled: (attributes?: number, ...children: (string | TextNodeRenderable)[]) => TextNodeRenderable;
};
