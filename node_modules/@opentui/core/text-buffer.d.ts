import type { StyledText } from "./lib/styled-text";
import { RGBA } from "./lib/RGBA";
import { type LineInfo, type RenderLib } from "./zig";
import { type Pointer } from "bun:ffi";
import { type WidthMethod } from "./types";
export interface TextChunk {
    __isChunk: true;
    text: string;
    fg?: RGBA;
    bg?: RGBA;
    attributes?: number;
}
export declare class TextBuffer {
    private lib;
    private bufferPtr;
    private _length;
    private _lineInfo?;
    private _destroyed;
    constructor(lib: RenderLib, ptr: Pointer);
    static create(widthMethod: WidthMethod): TextBuffer;
    private guard;
    setStyledText(text: StyledText): void;
    setDefaultFg(fg: RGBA | null): void;
    setDefaultBg(bg: RGBA | null): void;
    setDefaultAttributes(attributes: number | null): void;
    resetDefaults(): void;
    get length(): number;
    get ptr(): Pointer;
    getSelectedText(): string;
    getPlainText(): string;
    get lineInfo(): LineInfo;
    setSelection(start: number, end: number, bgColor?: RGBA, fgColor?: RGBA): void;
    resetSelection(): void;
    setLocalSelection(anchorX: number, anchorY: number, focusX: number, focusY: number, bgColor?: RGBA, fgColor?: RGBA): boolean;
    resetLocalSelection(): void;
    getSelection(): {
        start: number;
        end: number;
    } | null;
    hasSelection(): boolean;
    insertChunkGroup(index: number, text: string, fg?: RGBA, bg?: RGBA, attributes?: number): void;
    insertEncodedChunkGroup(index: number, textBytes: Uint8Array, fg?: RGBA, bg?: RGBA, attributes?: number): void;
    removeChunkGroup(index: number): void;
    replaceChunkGroup(index: number, text: string, fg?: RGBA, bg?: RGBA, attributes?: number): void;
    replaceEncodedChunkGroup(index: number, textBytes: Uint8Array, fg?: RGBA, bg?: RGBA, attributes?: number): void;
    get chunkGroupCount(): number;
    setWrapWidth(width: number | null): void;
    setWrapMode(mode: "char" | "word"): void;
    destroy(): void;
}
